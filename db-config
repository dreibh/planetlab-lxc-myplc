#!/usr/bin/env /usr/bin/plcsh
#
# Bootstraps the PLC database with a default administrator account and
# a default site, defines default slice attribute types, and
# creates/updates default system slices.
#
# Mark Huang <mlhuang@cs.princeton.edu>
# Copyright (C) 2006 The Trustees of Princeton University
#
# $Id$
# $HeadURL$

import os,sys
from optparse import OptionParser

from plc_config import PLCConfiguration

def GetSnippets(directory):
    filenames = []
    if os.path.exists(directory):
        try:
            filenames = os.listdir(directory)
        except OSError, e:
            raise Exception, "Error when opening %s (%s)" % \
                  (os.path.join(dir, file), e)
            
    ignored = (".bak","~",".rpmsave",".rpmnew",".orig")
    numberedfiles = {}
    for filename in filenames:
        shouldIgnore = False
        for ignore in ignored:
            if filename.endswith(ignore):
                shouldIgnore = True
                break

        if not shouldIgnore:
            parts = filename.split('-')
            if len(parts)>=2:
                name = '-'.join(parts)
                try:
                    number = int(parts[0])
                    entry = numberedfiles.get(number,[])
                    entry.append(name)
                    numberedfiles[number]=entry
                except ValueError:
                    shouldIgnore = True
            else:
                shouldIgnore = True

        if shouldIgnore:
            print "db-config: ignoring %s snippet" % filename

    filenames = []
    keys = numberedfiles.keys()
    keys.sort()
    for k in keys:
        for filename in numberedfiles[k]:
            filenames.append(filename)
    return filenames

def main():
    cfg = PLCConfiguration()
    cfg.load()
    variables = cfg.variables()

    usage="%prog [-- options] [steps]"
    release_url = "$URL$"
    parser = OptionParser(usage=usage, version="%prog " + release_url )
    parser.add_option("-l","--list",dest="list_steps",action="store_true",default=False,
                      help="Lists available steps")
    parser.add_option("-v","--verbose",dest="verbose",action="store_true",default=False,
                      help="Run verbosely")

    (options,args) = parser.parse_args()
    
    # Load variables into dictionaries
    for category_id, (category, variablelist) in variables.iteritems():
        globals()[category_id] = dict(zip(variablelist.keys(),
                                          [variable['value'] for variable in variablelist.values()]))

    directory="/etc/planetlab/db-config.d"
    snippets = GetSnippets(directory)

    if options.list_steps:
        for snippet in snippets:
            if not options.verbose: 
                print snippet
            else: 
                print "Found step %s/%s"%(directory,snippet)
                os.system("rpm -qf %s/%s"%(directory,snippet))
        sys.exit(0)
    
    for snippet in snippets:
        fullpath = os.path.join(directory, snippet)
        if options.verbose:
            print "Running step %s"%fullpath
        execfile(fullpath)

if __name__ == '__main__':
    main()

# Local variables:
# tab-width: 4
# mode: python
# End:
