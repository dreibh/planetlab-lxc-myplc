#!/usr/bin/env /usr/bin/plcsh
#
# Bootstraps the PLC database with a default administrator account and
# a default site, defines default slice attribute types, and
# creates/updates default system slices.
#
# Mark Huang <mlhuang@cs.princeton.edu>
# Copyright (C) 2006 The Trustees of Princeton University
#
# $Id: db-config,v 1.1 2006/06/23 20:33:44 mlhuang Exp $
#

from plc_config import PLCConfiguration
import sys

def main():
    cfg = PLCConfiguration()
    cfg.load()
    variables = cfg.variables()

    # Load variables into dictionaries
    for category_id, (category, variablelist) in variables.iteritems():
        globals()[category_id] = dict(zip(variablelist.keys(),
                                       [variable['value'] for variable in variablelist.values()]))

    # Create/update the default administrator account (should be
    # person_id 2).
    admin = { 'person_id': 2,
              'first_name': "Default",
              'last_name': "Administrator",
              'email': plc['root_user'],
              'password': plc['root_password'] }
    persons = GetPersons([admin['person_id']])
    if not persons:
        person_id = AddPerson(admin)
        if person_id != admin['person_id']:
            # Huh? Someone deleted the account manually from the database.
            DeletePerson(person_id)
            raise Exception, "Someone deleted the \"%s %s\" account from the database!" % \
                  (admin['first_name'], admin['last_name'])
        UpdatePerson(person_id, { 'enabled': True })
    else:
        person_id = persons[0]['person_id']
        UpdatePerson(person_id, admin)

    # Create/update the default site (should be site_id 1)
    if plc_www['port'] == '80':
        url = "http://" + plc_www['host'] + "/"
    elif plc_www['port'] == '443':
        url = "https://" + plc_www['host'] + "/"
    else:
        url = "http://" + plc_www['host'] + ":" + plc_www['port'] + "/"
    site = { 'site_id': 1,
             'name': plc['name'] + " Central",
             'abbreviated_name': plc['name'],
             # XXX Default site slice_prefix/login_base must be "pl_"
             # 'login_base': plc['slice_prefix'],
             'login_base': "pl",
             'is_public': False,
             'url': url,
             'max_slices': 100 }

    sites = GetSites([site['site_id']])
    if not sites:
        site_id = AddSite(site['name'], site['abbreviated_name'], site['login_base'], site)
        if site_id != site['site_id']:
            DeleteSite(site_id)
            raise Exception, "Someone deleted the \"%s\" site from the database!" % \
                  site['name']
        sites = [site]

    # Must call AdmUpdateSite() even after AdmAddSite() to update max_slices
    site_id = sites[0]['site_id']
    # XXX login_base cannot be updated
    del site['login_base']
    UpdateSite(site_id, site)

    # The default administrator account must be associated with a site
    # in order to login.
    AddPersonToSite(admin['person_id'], site['site_id'])
    SetPersonPrimarySite(admin['person_id'], site['site_id'])

    # Grant admin and PI roles to the default administrator account
    AddRoleToPerson(10, admin['person_id'])
    AddRoleToPerson(20, admin['person_id'])

    # Setup default PlanetLabConf entries
    default_conf_files = [
        # NTP configuration
        {'enabled': True,
         'source': 'PlanetLabConf/ntpconf.php',
         'dest': '/etc/ntp.conf',
         'file_permissions': '644',
         'file_owner': 'root',
         'file_group': 'root',
         'preinstall_cmd': '',
         'postinstall_cmd': '/etc/rc.d/init.d/ntpd restart',
         'error_cmd': '',
         'ignore_cmd_errors': False,
         'always_update': False},
        {'enabled': True,
         'source': 'PlanetLabConf/ntptickers.php',
         'dest': '/etc/ntp/step-tickers',
         'file_permissions': '644',
         'file_owner': 'root',
         'file_group': 'root',
         'preinstall_cmd': '',
         'postinstall_cmd': '/etc/rc.d/init.d/ntpd restart',
         'error_cmd': '',
         'ignore_cmd_errors': False,
         'always_update': False},

        # SSH server configuration
        {'enabled': True,
         'source': 'PlanetLabConf/sshd_config',
         'dest': '/etc/ssh/sshd_config',
         'file_permissions': '600',
         'file_owner': 'root',
         'file_group': 'root',
         'preinstall_cmd': '',
         'postinstall_cmd': '/etc/init.d/sshd restart',
         'error_cmd': '',
         'ignore_cmd_errors': False,
         'always_update': False},

        # Administrative SSH keys
        {'enabled': True,
         'source': 'PlanetLabConf/keys.php?root',
         'dest': '/root/.ssh/authorized_keys',
         'file_permissions': '644',
         'file_owner': 'root',
         'file_group': 'root',
         'preinstall_cmd': '',
         'postinstall_cmd': '',
         'error_cmd': '',
         'ignore_cmd_errors': False,
         'always_update': False},
        {'enabled': True,
         'source': 'PlanetLabConf/keys.php?site_admin',
         'dest': '/home/site_admin/.ssh/authorized_keys',
         'file_permissions': '644',
         'file_owner': 'site_admin',
         'file_group': 'site_admin',
         'preinstall_cmd': 'grep -q site_admin /etc/passwd',
         'postinstall_cmd': '',
         'error_cmd': '',
         'ignore_cmd_errors': False,
         'always_update': False},
        {'enabled': True,
         'source': 'PlanetLabConf/keys.php?role=admin',
         'dest': '/home/pl_admin/.ssh/authorized_keys',
         'file_permissions': '644',
         'file_owner': 'pl_admin',
         'file_group': 'pl_admin',
         'preinstall_cmd': 'grep -q pl_admin /etc/passwd',
         'postinstall_cmd': '',
         'error_cmd': '',
         'ignore_cmd_errors': False,
         'always_update': False},

        # Log rotation configuration
        {'enabled': True,
         'source': 'PlanetLabConf/logrotate.conf',
         'dest': '/etc/logrotate.conf',
         'file_permissions': '644',
         'file_owner': 'root',
         'file_group': 'root',
         'preinstall_cmd': '',
         'postinstall_cmd': '',
         'error_cmd': '',
         'ignore_cmd_errors': False,
         'always_update': False},

        # updatedb/locate nightly cron job
        {'enabled': True,
         'source': 'PlanetLabConf/slocate.cron',
         'dest': '/etc/cron.daily/slocate.cron',
         'file_permissions': '755',
         'file_owner': 'root',
         'file_group': 'root',
         'preinstall_cmd': '',
         'postinstall_cmd': '',
         'error_cmd': '',
         'ignore_cmd_errors': False,
         'always_update': False},

        # YUM configuration
        {'enabled': True,
         'source': 'PlanetLabConf/yum.conf.php?gpgcheck=1',
         'dest': '/etc/yum.conf',
         'file_permissions': '644',
         'file_owner': 'root',
         'file_group': 'root',
         'preinstall_cmd': '',
         'postinstall_cmd': '',
         'error_cmd': '',
         'ignore_cmd_errors': False,
         'always_update': False},
        {'enabled': True,
         'source': 'PlanetLabConf/delete-rpm-list-production',
         'dest': '/etc/planetlab/delete-rpm-list',
         'file_permissions': '644',
         'file_owner': 'root',
         'file_group': 'root',
         'preinstall_cmd': '',
         'postinstall_cmd': '',
         'error_cmd': '',
         'ignore_cmd_errors': False,
         'always_update': False},

        # PLC configuration
        {'enabled': True,
         'source': 'PlanetLabConf/get_plc_config.php',
         'dest': '/etc/planetlab/plc_config',
         'file_permissions': '644',
         'file_owner': 'root',
         'file_group': 'root',
         'preinstall_cmd': '',
         'postinstall_cmd': '',
         'error_cmd': '',
         'ignore_cmd_errors': False,
         'always_update': False},
        {'enabled': True,
         'source': 'PlanetLabConf/get_plc_config.php?python',
         'dest': '/etc/planetlab/plc_config.py',
         'file_permissions': '644',
         'file_owner': 'root',
         'file_group': 'root',
         'preinstall_cmd': '',
         'postinstall_cmd': '',
         'error_cmd': '',
         'ignore_cmd_errors': False,
         'always_update': False},
        {'enabled': True,
         'source': 'PlanetLabConf/get_plc_config.php?perl',
         'dest': '/etc/planetlab/plc_config.pl',
         'file_permissions': '644',
         'file_owner': 'root',
         'file_group': 'root',
         'preinstall_cmd': '',
         'postinstall_cmd': '',
         'error_cmd': '',
         'ignore_cmd_errors': False,
         'always_update': False},
        {'enabled': True,
         'source': 'PlanetLabConf/get_plc_config.php?php',
         'dest': '/etc/planetlab/php/plc_config.php',
         'file_permissions': '644',
         'file_owner': 'root',
         'file_group': 'root',
         'preinstall_cmd': '',
         'postinstall_cmd': '',
         'error_cmd': '',
         'ignore_cmd_errors': False,
         'always_update': False},

        # Node Manager configuration
        {'enabled': True,
         'source': 'PlanetLabConf/pl_nm-v3.conf',
         'dest': '/etc/planetlab/pl_nm.conf',
         'file_permissions': '644',
         'file_owner': 'root',
         'file_group': 'root',
         'preinstall_cmd': '',
         'postinstall_cmd': '/etc/init.d/pl_nm restart',
         'error_cmd': '',
         'ignore_cmd_errors': False,
         'always_update': False},
        {'enabled': True,
         'source': 'PlanetLabConf/RootResources/plc_slice_pool.php',
         'dest': '/home/pl_nm/RootResources/plc_slice_pool',
         'file_permissions': '644',
         'file_owner': 'pl_nm',
         'file_group': 'pl_nm',
         'preinstall_cmd': '',
         'postinstall_cmd': '',
         'error_cmd': '',
         'ignore_cmd_errors': False,
         'always_update': False},
        {'enabled': True,
         'source': 'PlanetLabConf/RootResources/pl_conf.py',
         'dest': '/home/pl_nm/RootResources/pl_conf',
         'file_permissions': '644',
         'file_owner': 'pl_nm',
         'file_group': 'pl_nm',
         'preinstall_cmd': '',
         'postinstall_cmd': '/etc/init.d/pl_nm restart',
         'error_cmd': '',
         'ignore_cmd_errors': False,
         'always_update': False},
        {'enabled': True,
         'source': 'PlanetLabConf/RootResources/pl_netflow.py',
         'dest': '/home/pl_nm/RootResources/pl_netflow',
         'file_permissions': '644',
         'file_owner': 'pl_nm',
         'file_group': 'pl_nm',
         'preinstall_cmd': '',
         'postinstall_cmd': '',
         'error_cmd': '',
         'ignore_cmd_errors': False,
         'always_update': False},

        # Proper configuration
        {'enabled': True,
         'source': 'PlanetLabConf/propd-NM-1.0.conf',
         'dest': '/etc/proper/propd.conf',
         'file_permissions': '644',
         'file_owner': 'root',
         'file_group': 'root',
         'preinstall_cmd': '',
         'postinstall_cmd': '/etc/init.d/proper restart',
         'error_cmd': '',
         'ignore_cmd_errors': True,
         'always_update': False},

        # Bandwidth cap
        {'enabled': True,
         'source': 'PlanetLabConf/bwlimit.php',
         'dest': '/etc/planetlab/bwcap',
         'file_permissions': '644',
         'file_owner': 'root',
         'file_group': 'root',
         'preinstall_cmd': '',
         'postinstall_cmd': '/etc/init.d/pl_nm restart',
         'error_cmd': '',
         'ignore_cmd_errors': True,
         'always_update': False},

        # Proxy ARP setup
        {'enabled': True,
         'source': 'PlanetLabConf/proxies.php',
         'dest': '/etc/planetlab/proxies',
         'file_permissions': '644',
         'file_owner': 'root',
         'file_group': 'root',
         'preinstall_cmd': '',
         'postinstall_cmd': '',
         'error_cmd': '',
         'ignore_cmd_errors': False,
         'always_update': False},

        # Firewall configuration
        {'enabled': True,
         'source': 'PlanetLabConf/iptables',
         'dest': '/etc/sysconfig/iptables',
         'file_permissions': '600',
         'file_owner': 'root',
         'file_group': 'root',
         'preinstall_cmd': '',
         'postinstall_cmd': '',
         'error_cmd': '',
         'ignore_cmd_errors': False,
         'always_update': False},
        {'enabled': True,
         'source': 'PlanetLabConf/blacklist.php',
         'dest': '/etc/planetlab/blacklist',
         'file_permissions': '600',
         'file_owner': 'root',
         'file_group': 'root',
         'preinstall_cmd': '',
         'postinstall_cmd': '/sbin/iptables-restore --noflush < /etc/planetlab/blacklist',
         'error_cmd': '',
         'ignore_cmd_errors': True,
         'always_update': True},

        # /etc/issue
        {'enabled': True,
         'source': 'PlanetLabConf/issue.php',
         'dest': '/etc/issue',
         'file_permissions': '644',
         'file_owner': 'root',
         'file_group': 'root',
         'preinstall_cmd': '',
         'postinstall_cmd': '',
         'error_cmd': '',
         'ignore_cmd_errors': False,
         'always_update': False},

        # Kernel parameters
        {'enabled': True,
         'source': 'PlanetLabConf/sysctl.php',
         'dest': '/etc/sysctl.conf',
         'file_permissions': '644',
         'file_owner': 'root',
         'file_group': 'root',
         'preinstall_cmd': '',
         'postinstall_cmd': '/sbin/sysctl -e -p /etc/sysctl.conf',
         'error_cmd': '',
         'ignore_cmd_errors': False,
         'always_update': True},

        # Sendmail configuration
        {'enabled': True,
         'source': 'PlanetLabConf/alpha-sendmail.mc',
         'dest': '/etc/mail/sendmail.mc',
         'file_permissions': '644',
         'file_owner': 'root',
         'file_group': 'root',
         'preinstall_cmd': '',
         'postinstall_cmd': '',
         'error_cmd': '',
         'ignore_cmd_errors': False,
         'always_update': False},
        {'enabled': True,
         'source': 'PlanetLabConf/alpha-sendmail.cf',
         'dest': '/etc/mail/sendmail.cf',
         'file_permissions': '644',
         'file_owner': 'root',
         'file_group': 'root',
         'preinstall_cmd': '',
         'postinstall_cmd': 'service sendmail restart',
         'error_cmd': '',
         'ignore_cmd_errors': False,
         'always_update': False},

        # GPG signing keys
        {'enabled': True,
         'source': 'PlanetLabConf/RPM-GPG-KEY-fedora',
         'dest': '/etc/pki/rpm-gpg/RPM-GPG-KEY-fedora',
         'file_permissions': '644',
         'file_owner': 'root',
         'file_group': 'root',
         'preinstall_cmd': '',
         'postinstall_cmd': 'rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-fedora',
         'error_cmd': '',
         'ignore_cmd_errors': False,
         'always_update': False},
        {'enabled': True,
         'source': 'PlanetLabConf/get_gpg_key.php',
         'dest': '/etc/pki/rpm-gpg/RPM-GPG-KEY-planetlab',
         'file_permissions': '644',
         'file_owner': 'root',
         'file_group': 'root',
         'preinstall_cmd': '',
         'postinstall_cmd': 'rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-planetlab',
         'error_cmd': '',
         'ignore_cmd_errors': False,
         'always_update': False},

        # Ping of death configuration
        {'enabled': True,
         'source': 'PlanetLabConf/ipod.conf.php',
         'dest': '/etc/ipod.conf',
         'file_permissions': '644',
         'file_owner': 'root',
         'file_group': 'root',
         'preinstall_cmd': '',
         'postinstall_cmd': '',
         'error_cmd': '',
         'ignore_cmd_errors': False,
         'always_update': False},

        # sudo configuration
        {'enabled': True,
         'source': 'PlanetLabConf/v3-sudoers.php',
         'dest': '/etc/sudoers',
         'file_permissions': '440',
         'file_owner': 'root',
         'file_group': 'root',
         'preinstall_cmd': '',
         'postinstall_cmd': '/usr/sbin/visudo -c',
         'error_cmd': '',
         'ignore_cmd_errors': False,
         'always_update': False}
        ]

    # Get list of existing (enabled, global) files
    conf_files = GetConfFiles()
    conf_files = filter(lambda conf_file: conf_file['enabled'] and \
                                          not conf_file['node_ids'] and \
                                          not conf_file['nodegroup_ids'],
                        conf_files)
    dests = [conf_file['dest'] for conf_file in conf_files]
    conf_files = dict(zip(dests, conf_files))

    # Create/update default PlanetLabConf entries
    for default_conf_file in default_conf_files:
        print "Considering", default_conf_file['dest']
        if default_conf_file['dest'] not in dests:
            AddConfFile(default_conf_file)
        else:
            conf_file = conf_files[default_conf_file['dest']]
            UpdateConfFile(conf_file['conf_file_id'], default_conf_file)

    # Setup default slice attribute types
    default_attribute_types = [
        # Slice type (only vserver is supported)
        {'name': "plc_slice_type",
         'description': "Type of slice rspec to be created",
         'min_role_id': 20},

        # Slice initialization script
        {'name': "initscript",
         'description': "slice initialization script",
         'min_role_id': 10},

        # CPU share (general_prop_share is deprecated)
        {'name': "general_prop_share",
         'description': "general share",
         'min_role_id': 10},
        {'name': "nm_cpu_share",
         'description': "Number of CPU shares to be allocated to slice",
         'min_role_id': 10},

        # Bandwidth limits
        {'name': "nm_net_min_rate",
         'description': "Minimum network Tx bandwidth (bps)",
         'min_role_id': 10},
        {'name': "nm_net_max_rate",
         'description': "Maximum network Tx bandwidth (bps)",
         'min_role_id': 10},
        {'name': "nm_net_avg_rate",
         'description': "Average daily network Tx bandwidth (bps)",
         'min_role_id': 10},
        {'name': "nm_net_exempt_min_rate",
         'description': "Minimum network Tx bandwidth to Internet2 destinations (bps)",
         'min_role_id': 10},
        {'name': "nm_net_exempt_max_rate",
         'description': "Maximum network Tx bandwidth to Internet2 destinations (bps)",
         'min_role_id': 10},
        {'name': "nm_net_exempt avg_rate",
         'description': "Average daily network Tx bandwidth to Internet2 destinations (bps)",
         'min_role_id': 10},

        # Disk quota
        {'name': "nm_disk_quota",
         'description': "Disk quota (1k disk blocks)",
         'min_role_id': 10},

        # Special attributes applicable to Slice Creation Service (pl_conf) slice
        {'name': "plc_agent_version",
         'description': "Version of PLC agent (slice creation service) software to be deployed",
         'min_role_id': 10},
        {'name': "plc_ticket_pubkey",
         'description': "Public key used to verify PLC-signed tickets",
         'min_role_id': 10}
        ]

    # Get list of existing attribute types
    attribute_types = GetSliceAttributeTypes()
    attribute_types = [attribute_type['name'] for attribute_type in attribute_types]

    # Create/update default slice attribute types
    for default_attribute_type in default_attribute_types:
        if default_attribute_type['name'] not in attribute_types:
            AddSliceAttributeType(default_attribute_type)
        else:
            UpdateSliceAttributeType(default_attribute_type['name'], default_attribute_type)

    # Get contents of SSL public certificate used for signing slice tickets
    try:
        plc_ticket_pubkey = ""
        for line in file(plc_ma_sa['ssl_key_pub']):
            # Skip comments
            if line[0:5] != "-----":
                # XXX The embedded newlines matter, do not strip()!
                plc_ticket_pubkey += line
    except:
        plc_ticket_pubkey = '%KEY%'

    # Create/update system slices
    slices = [{'name': "pl_conf",
               'description': "PlanetLab Slice Creation Service (SCS)",
               'url': url,
               'instantiation': "plc-instantiated",
               # Renew forever
               'expires': sys.maxint,
               'attributes': {'plc_slice_type': "VServerSlice",
                              'plc_agent_version': "1.0",
                              'plc_ticket_pubkey': plc_ticket_pubkey}},
              {'name': "pl_conf_vserverslice",
               'description': "Default attributes for vserver slices",
               'url': url,
               'instantiation': "plc-instantiated",
               # Renew forever
               'expires': sys.maxint,
               'attributes': {'nm_cpu_share': "32",
                              'plc_slice_type': "VServerSlice",
                              'nm_disk_quota': "5000000"}}]
    for slice in slices:
        try:
            UpdateSlice(slice['name'], slice)
        except:
            AddSlice(slice)
        # Create/update all attributes
        for attribute, value in slice['attributes'].iteritems():
            AddSliceAttribute(slice['name'], attribute, value)


if __name__ == '__main__':
    main()
